package com.example.imageuploadtest;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Hashtable;

import android.util.Log;

public class HttpUtils {
	
	 HttpURLConnection conn = null;
	    DataOutputStream dos = null;  
	    String lineEnd = "\r\n";
	    String twoHyphens = "--";
	    String boundary = "*****";
	    int bytesRead, bytesAvailable, bufferSize;
	    byte[] buffer;
	    int maxBufferSize = 1 * 1024 * 1024; // 1MB
	    

	    final String TAG = "HttpUtils";
	    
	    public boolean uploadImage(String url, Hashtable params, String filepath, String fileId, FileUploadObserver uploadObserver) throws Exception {

	    	HttpURLConnection  conn        = null;
	    	BufferedReader     br          = null;
	    	DataOutputStream   dos         = null;
	    	DataInputStream    inStream    = null;

	    	InputStream        is          = null;
	    	OutputStream       os          = null;
	    	String             lineEnd     = "\r\n";
	    	String             twoHyphens  = "--";
	    	String             boundary    =  "*****";
	    	int                maxBufSize  = 1*1024*1024;
	    	byte[]             buffer;


	    	int bytesRead, bytesAvailable, bufferSize;    	
	    	
	    	try {
	    		FileInputStream fileInputStream = new FileInputStream( new File(filepath) );

	    		// open a URL connection to the Servlet 
	    		URL url = new URL(url);

	    		// Open a HTTP connection to the URL
	    		conn = (HttpURLConnection) url.openConnection();

	    		// Allow Inputs
	    		conn.setDoInput(true);

	    		// Allow Outputs
	    		conn.setDoOutput(true);

	    		// Don't use a cached copy.
	    		conn.setUseCaches(false);

	    		conn.setRequestMethod("POST");
	    		conn.setRequestProperty("Connection", "Keep-Alive"); 
	    		conn.setRequestProperty("Content-Type", "multipart/form-data;boundary="+boundary);
	       
	    		dos = new DataOutputStream( conn.getOutputStream() );
	      
	            Enumeration keys = params.keys();
	     
	    		while(keys.hasMoreElements()){
	    			String key = (String)keys.nextElement();
	    			String value = (String)params.get(key);
	    		
	       		    dos.writeBytes(twoHyphens + boundary + lineEnd);
	    		    dos.writeBytes("Content-Disposition: form-data; name=\"" + key + "\"" + lineEnd);
	    		    dos.writeBytes(lineEnd);
	    		    dos.writeBytes(value);
	    		    dos.writeBytes(lineEnd);
	    		}
	      	
	    		dos.writeBytes(twoHyphens + boundary + lineEnd);
	    		dos.writeBytes("Content-Disposition: form-data; name=\"" + fileId + "\";" + " filename=\"" + filepath +"\"" + lineEnd);
	    		dos.writeBytes(lineEnd);

	    		// create a buffer of maximum size
	    		bytesAvailable = fileInputStream.available();
	    		bufferSize     = Math.min(bytesAvailable, maxBufSize);
	    		buffer         = new byte[bufferSize];
	    		
	    		int progress;
	    		

	    		// read file and write it into form...
	    		bytesRead = fileInputStream.read(buffer, 0, bufferSize);

	    		while (bytesRead > 0) {
	    			dos.write(buffer, 0, bufferSize);
	    			bytesAvailable = fileInputStream.available();
	    			bufferSize     = Math.min(bytesAvailable, maxBufSize);
	    			bytesRead      = fileInputStream.read(buffer, 0, bufferSize);
	    			
	    			//progress = bytesRead / total;
	    			
	    			
	    		}

	    		dos.writeBytes(lineEnd);
	    		dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
	    	
	    		/*close streams*/
	    		fileInputStream.close();
	    		dos.flush();
	    		dos.close();

	    	}catch (MalformedURLException ex){
	    		Log.d(TAG, "[Utils] :: uploadImage() : " + ex);
	    	    return false;
	    	}
	    	catch (IOException ioe){
	    		Log.d(TAG, "[Utils] :: uploadImage() : " + ioe);
	    	    return false;
	    	}

	        /* read server response */
	    	try {
	    		inStream = new DataInputStream ( conn.getInputStream() );
	    		String str;
	    		while (( str = inStream.readLine()) != null) {
	    			Log.d(TAG, "[Utils] :: uploadImage() : Server response is: " + str);
	    		}
	    		inStream.close();
	    	}
	    	catch (IOException ioex){
	    		Log.d(TAG, "[Utils] :: uploadImage() : From (ServerResponse): " + ioex);
	            return false;   
	    	}
	    	return true;
	      }/*uploadImage*/
	    
	
	
}// HttpUtils
