  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 *                       _____  _____                                        *
 *					    / __  \/  ___|       				                 *
 *					   | |  |_|| |                                           *
 *                     | |____ | |     _____  ____			                 *
 *					   \_____ \| |    /__   \/	_ |		 	    			 *
 *					    _    | | |     __|  ||  __|			   				 *
 *					   | |___| | |___ / __  || |			   				 *
 *					   \______/\_____|\_____/|_|               				 *
 *                                                              			 *
 * DESCRIPTION     The Utility(Utils) class for SCap desktop applicaiton.   *
 * CREATED         2012-03-01                                                *
 * AUTHOR          WeaveBytes InfoTech R&D Team                              *
 *                                                                           *
 * Copyright (c) 2011 onwards by WeaveBytes InfoTech Pvt. Ltd.               *
 * Please reports bugs at weavebytes@gmail.com                               *
 *                                                                           *
 * This file may be distributed and/or modified under the terms of the       *
 * GNU General Public License version 2 as published by the Free Software    *
 * Foundation. (See COPYING.GPL for details.)                                *
 *                                                                           *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE   *
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
 
import java.awt.image.BufferedImage;
import java.awt.AWTException;
import javax.imageio.ImageIO;
import java.io.IOException;
import java.awt.Rectangle;
import java.awt.Robot;
import javax.swing.*;

import android.util.Log;

import java.io.File;
import java.awt.*;

import java.util.Enumeration;
import java.util.Hashtable;
import java.sql.Timestamp;
import java.util.Date;
import java.net.*;
import java.io.*;

import java.util.Calendar;
import java.text.SimpleDateFormat;

/***********************************************************
*
* Generic utilites, convenience and helper functions.
*
***********************************************************/


public class Utils{	

	final String TAG = "Utils";
	
	
  public boolean uploadImage(String apiUrl, Hashtable params, String filepath) throws Exception {

	HttpURLConnection  conn        = null;
	BufferedReader     br          = null;
	DataOutputStream   dos         = null;
	DataInputStream    inStream    = null;

	InputStream        is          = null;
	OutputStream       os          = null;
	String             lineEnd     = "\r\n";
	String             twoHyphens  = "--";
	String             boundary    =  "*****";
	int                maxBufSize  = 1*1024*1024;
	byte[]             buffer;


	int bytesRead, bytesAvailable, bufferSize;

	
	
	
	try {
		FileInputStream fileInputStream = new FileInputStream( new File(filepath) );

		// open a URL connection to the Servlet 
		URL url = new URL(apiUrl);

		// Open a HTTP connection to the URL
		conn = (HttpURLConnection) url.openConnection();

		// Allow Inputs
		conn.setDoInput(true);

		// Allow Outputs
		conn.setDoOutput(true);

		// Don't use a cached copy.
		conn.setUseCaches(false);

		conn.setRequestMethod("POST");
		conn.setRequestProperty("Connection", "Keep-Alive"); 
		conn.setRequestProperty("Content-Type", "multipart/form-data;boundary="+boundary);
   
		dos = new DataOutputStream( conn.getOutputStream() );
  
        Enumeration keys = params.keys();
 
		while(keys.hasMoreElements()){
			String key = (String)keys.nextElement();
			String value = (String)params.get(key);
		
   		    dos.writeBytes(twoHyphens + boundary + lineEnd);
		    dos.writeBytes("Content-Disposition: form-data; name=\"" + key + "\"" + lineEnd);
		    dos.writeBytes(lineEnd);
		    dos.writeBytes(value);
		    dos.writeBytes(lineEnd);
		}
  	
		dos.writeBytes(twoHyphens + boundary + lineEnd);
		dos.writeBytes("Content-Disposition: form-data; name=\"scap_file\";" + " filename=\"" + filepath +"\"" + lineEnd);
		dos.writeBytes(lineEnd);

		// create a buffer of maximum size
		bytesAvailable = fileInputStream.available();
		bufferSize     = Math.min(bytesAvailable, maxBufSize);
		buffer         = new byte[bufferSize];

		// read file and write it into form...
		bytesRead = fileInputStream.read(buffer, 0, bufferSize);

		while (bytesRead > 0) {
			dos.write(buffer, 0, bufferSize);
			bytesAvailable = fileInputStream.available();
			bufferSize     = Math.min(bytesAvailable, maxBufSize);
			bytesRead      = fileInputStream.read(buffer, 0, bufferSize);
		}

		dos.writeBytes(lineEnd);
		dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
	
		/*close streams*/
		fileInputStream.close();
		dos.flush();
		dos.close();

	}catch (MalformedURLException ex){
		Log.d(TAG, "[Utils] :: uploadImage() : " + ex);
	    return false;
	}
	catch (IOException ioe){
		Log.d(TAG, "[Utils] :: uploadImage() : " + ioe);
	    return false;
	}

    /* read server response */
	try {
		inStream = new DataInputStream ( conn.getInputStream() );
		String str;
		while (( str = inStream.readLine()) != null) {
			Log.d(TAG, "[Utils] :: uploadImage() : Server response is: " + str);
		}
		inStream.close();
	}
	catch (IOException ioex){
		Log.d(TAG, "[Utils] :: uploadImage() : From (ServerResponse): " + ioex);
        return false;   
	}
	return true;
  }/*uploadImage*/
  
  
	
}/*Utils*/